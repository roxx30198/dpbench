# SPDX-FileCopyrightText: 2022 - 2023 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

INT_MAX = 2147483647

blosum62 = [
    [
        4,
        -1,
        -2,
        -2,
        0,
        -1,
        -1,
        0,
        -2,
        -1,
        -1,
        -1,
        -1,
        -2,
        -1,
        1,
        0,
        -3,
        -2,
        0,
        -2,
        -1,
        0,
        -4,
    ],
    [
        -1,
        5,
        0,
        -2,
        -3,
        1,
        0,
        -2,
        0,
        -3,
        -2,
        2,
        -1,
        -3,
        -2,
        -1,
        -1,
        -3,
        -2,
        -3,
        -1,
        0,
        -1,
        -4,
    ],
    [
        -2,
        0,
        6,
        1,
        -3,
        0,
        0,
        0,
        1,
        -3,
        -3,
        0,
        -2,
        -3,
        -2,
        1,
        0,
        -4,
        -2,
        -3,
        3,
        0,
        -1,
        -4,
    ],
    [
        -2,
        -2,
        1,
        6,
        -3,
        0,
        2,
        -1,
        -1,
        -3,
        -4,
        -1,
        -3,
        -3,
        -1,
        0,
        -1,
        -4,
        -3,
        -3,
        4,
        1,
        -1,
        -4,
    ],
    [
        0,
        -3,
        -3,
        -3,
        9,
        -3,
        -4,
        -3,
        -3,
        -1,
        -1,
        -3,
        -1,
        -2,
        -3,
        -1,
        -1,
        -2,
        -2,
        -1,
        -3,
        -3,
        -2,
        -4,
    ],
    [
        -1,
        1,
        0,
        0,
        -3,
        5,
        2,
        -2,
        0,
        -3,
        -2,
        1,
        0,
        -3,
        -1,
        0,
        -1,
        -2,
        -1,
        -2,
        0,
        3,
        -1,
        -4,
    ],
    [
        -1,
        0,
        0,
        2,
        -4,
        2,
        5,
        -2,
        0,
        -3,
        -3,
        1,
        -2,
        -3,
        -1,
        0,
        -1,
        -3,
        -2,
        -2,
        1,
        4,
        -1,
        -4,
    ],
    [
        0,
        -2,
        0,
        -1,
        -3,
        -2,
        -2,
        6,
        -2,
        -4,
        -4,
        -2,
        -3,
        -3,
        -2,
        0,
        -2,
        -2,
        -3,
        -3,
        -1,
        -2,
        -1,
        -4,
    ],
    [
        -2,
        0,
        1,
        -1,
        -3,
        0,
        0,
        -2,
        8,
        -3,
        -3,
        -1,
        -2,
        -1,
        -2,
        -1,
        -2,
        -2,
        2,
        -3,
        0,
        0,
        -1,
        -4,
    ],
    [
        -1,
        -3,
        -3,
        -3,
        -1,
        -3,
        -3,
        -4,
        -3,
        4,
        2,
        -3,
        1,
        0,
        -3,
        -2,
        -1,
        -3,
        -1,
        3,
        -3,
        -3,
        -1,
        -4,
    ],
    [
        -1,
        -2,
        -3,
        -4,
        -1,
        -2,
        -3,
        -4,
        -3,
        2,
        4,
        -2,
        2,
        0,
        -3,
        -2,
        -1,
        -2,
        -1,
        1,
        -4,
        -3,
        -1,
        -4,
    ],
    [
        -1,
        2,
        0,
        -1,
        -3,
        1,
        1,
        -2,
        -1,
        -3,
        -2,
        5,
        -1,
        -3,
        -1,
        0,
        -1,
        -3,
        -2,
        -2,
        0,
        1,
        -1,
        -4,
    ],
    [
        -1,
        -1,
        -2,
        -3,
        -1,
        0,
        -2,
        -3,
        -2,
        1,
        2,
        -1,
        5,
        0,
        -2,
        -1,
        -1,
        -1,
        -1,
        1,
        -3,
        -1,
        -1,
        -4,
    ],
    [
        -2,
        -3,
        -3,
        -3,
        -2,
        -3,
        -3,
        -3,
        -1,
        0,
        0,
        -3,
        0,
        6,
        -4,
        -2,
        -2,
        1,
        3,
        -1,
        -3,
        -3,
        -1,
        -4,
    ],
    [
        -1,
        -2,
        -2,
        -1,
        -3,
        -1,
        -1,
        -2,
        -2,
        -3,
        -3,
        -1,
        -2,
        -4,
        7,
        -1,
        -1,
        -4,
        -3,
        -2,
        -2,
        -1,
        -2,
        -4,
    ],
    [
        1,
        -1,
        1,
        0,
        -1,
        0,
        0,
        0,
        -1,
        -2,
        -2,
        0,
        -1,
        -2,
        -1,
        4,
        1,
        -3,
        -2,
        -2,
        0,
        0,
        0,
        -4,
    ],
    [
        0,
        -1,
        0,
        -1,
        -1,
        -1,
        -1,
        -2,
        -2,
        -1,
        -1,
        -1,
        -1,
        -2,
        -1,
        1,
        5,
        -2,
        -2,
        0,
        -1,
        -1,
        0,
        -4,
    ],
    [
        -3,
        -3,
        -4,
        -4,
        -2,
        -2,
        -3,
        -2,
        -2,
        -3,
        -2,
        -3,
        -1,
        1,
        -4,
        -3,
        -2,
        11,
        2,
        -3,
        -4,
        -3,
        -2,
        -4,
    ],
    [
        -2,
        -2,
        -2,
        -3,
        -2,
        -1,
        -2,
        -3,
        2,
        -1,
        -1,
        -2,
        -1,
        3,
        -3,
        -2,
        -2,
        2,
        7,
        -1,
        -3,
        -2,
        -1,
        -4,
    ],
    [
        0,
        -3,
        -3,
        -3,
        -1,
        -2,
        -2,
        -3,
        -3,
        3,
        1,
        -2,
        1,
        -1,
        -2,
        -2,
        0,
        -3,
        -1,
        4,
        -3,
        -2,
        -1,
        -4,
    ],
    [
        -2,
        -1,
        3,
        4,
        -3,
        0,
        1,
        -1,
        0,
        -3,
        -4,
        0,
        -3,
        -3,
        -2,
        0,
        -1,
        -4,
        -3,
        -3,
        4,
        1,
        -1,
        -4,
    ],
    [
        -1,
        0,
        0,
        1,
        -3,
        3,
        4,
        -2,
        0,
        -3,
        -3,
        1,
        -1,
        -3,
        -1,
        0,
        -1,
        -3,
        -2,
        -2,
        1,
        4,
        -1,
        -4,
    ],
    [
        0,
        -1,
        -1,
        -1,
        -2,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -2,
        0,
        0,
        -2,
        -1,
        -1,
        -1,
        -1,
        -1,
        -4,
    ],
    [
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        -4,
        1,
    ],
]


def initialize(grid_size, penalty, seed, types_dict=None):
    import numpy as np
    import numpy.random as rand

    dtype = types_dict["int"]
    # dtype = np.int16

    max_rows, max_cols = grid_size + 1, grid_size + 1
    input_itemsets = np.empty((max_rows * max_cols), dtype=dtype)
    reference = np.zeros((max_rows * max_cols), dtype=dtype)
    result = np.empty(grid_size, dtype=dtype)

    for i in range(max_cols):
        for j in range(max_cols):
            input_itemsets[i * max_cols + j] = 0

    rand.seed(seed)

    for i in range(1, max_rows):
        input_itemsets[i * max_cols] = rand.randint(0, INT_MAX) % 10 + 1

    for j in range(1, max_cols):
        input_itemsets[j] = rand.randint(0, INT_MAX) % 10 + 1

    for i in range(1, max_cols):
        for j in range(1, max_rows):
            reference[i * max_cols + j] = blosum62[
                input_itemsets[i * max_cols]
            ][input_itemsets[j]]

    for i in range(1, max_rows):
        input_itemsets[i * max_cols] = -i * penalty
    for j in range(1, max_cols):
        input_itemsets[j] = -j * penalty

    return (input_itemsets, reference, max_rows, max_cols, result)


# print(initialize(16,4,7))
